#!/usr/bin/env python
from decimal import Decimal
from math import *
import re

class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return '' if self.items == [] else self.items[-1]

def Rassoc(op):
    return op == '^'

def check(o, op):
    if Rassoc(o):
        return prior(op.peek()) > prior(o)
    return not Rassoc(o) and prior(op.peek()) >= prior(o)

def getVal(x):
    print("don't be an asshole, tell the variable of ", x)
    return float(input)

def calc(op, st):
    if type(op) == int and op < 0:
        l = st.pop()
        op = chr(-op)
        return {'+': l, '-': -l}[op]
    elif type(op) != str:
        return op(st.pop())

    r, l = st.pop(), st.pop()
    result = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '/': lambda x, y: x / y,
        '%': lambda x, y: x % y,
        '^': lambda x, y: x ** y,
        'log': lambda x, y: log(x, y)
    }[op](l, r)
    return result

def RPE(str, n):
    st = Stack()
    op = Stack()
    i, flag = 0, 1

    while i < n:
        if s[i] in [' ', '\n', ',']:
            i += 1
            continue
        if s[i] == '(':
            op.push(s[i])
            flag = 1
        elif s[i] == ')':
            while op.peek() != '(':
                st.push(calc(op.pop(), st))
            op.pop()
            flag = 0
        elif s[i] in ['+', '-', '*', '/', '%', '^']:
            cur = s[i]
            if (flag):
                cur = -ord(cur)
            while not op.isEmpty() and check(cur, op):
                st.push(calc(op.pop(), st))
            op.push(cur)
            flag = 1
        elif s[i].isdigit():
            x, i = s[i], i + 1
            while i < n and s[i] in '0123456789.':
                x += s[i]
                i += 1
            i -= 1
            st.push(float(x))
            flag = 0
        elif ord(s[i]) >= 65 and ord(s[i]) <= 122:
            y, i = s[i], i + 1
            while i < n and re.match(r'[A-Za-z]', s[i]):
                y += s[i]
                i += 1
            i -= 1
            fs = {
                'sin': sin,
                'cos': cos,
                'tan': tan,
                'log': 'log',
                'sqrt': sqrt,
                'asin': asin,
                'acos': acos,
                'atan': atan
            }

            if y in fs:
                op.push(fs[y])
            else:
                st.push(getVal(y))
        i += 1

    while not op.isEmpty():
        st.push(calc(op.pop(), st))

    return Decimal(st.pop())

def prior(op):
    if type(op) == int and op < 0:
        return 5
    elif type(op) != str:
        return 4
    res = {'^': 4, '+': 1, '-': 1, '*': 2, '/': 2, '%': 2, '(': -1, ')': -1, 'log': 4}
    return res[op]

with open('input', 'r') as fin:
    s = fin.readline()
with open('output1', 'w') as fout:
    fout.write(str(RPE(s, len(s))))